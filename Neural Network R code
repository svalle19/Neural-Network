# Load necessary libraries
library(readxl)
library(caTools)
library(nnet) # For neural networks
library(caret) # For evaluating model performance
library(NeuralNetTools) # For visualizing neural networks

# Set seed for reproducibility
set.seed(06192024)

# Read the Excel file
GS_5_23_24 <- read_excel("D:/GS 5.23.24.xlsx")
View(GS_5_23_24)

# Remove rows with NA values in the input features or target variable
GS_5_23_24 <- na.omit(GS_5_23_24)

# Splitting dataset into 4:1 ratio for training data set
sample_data <- sample.split(GS_5_23_24$GS0or1, SplitRatio = 0.75)
train_data <- subset(GS_5_23_24, sample_data == TRUE)
test_data <- subset(GS_5_23_24, sample_data == FALSE)

# Convert GS0or1 to a factor for classification
train_data$GS0or1 <- as.factor(train_data$GS0or1)
test_data$GS0or1 <- as.factor(test_data$GS0or1)

# Define the formula for the neural network
formula_nn <- GS0or1 ~ Ecadherin + Ncadherin + Bcatenin + phosphoRbS249 + Stage + Grade + GleasonGrade + Metastais + LymphNodes + TumorSize

# Train the neural network
nn <- nnet(formula_nn, data = train_data, size = 5, decay = 0.01, maxit = 200)

# Predict on the test set
pred_prob <- predict(nn, newdata = test_data, type = "raw")

# Convert probabilities to class labels
pred_class <- as.factor(ifelse(pred_prob > 0.5, 1, 0))

# Convert GS0or1 to numeric for RMSE calculation
test_data$GS0or1_numeric <- as.numeric(as.character(test_data$GS0or1))

# Check for NA values in predictions or actual values
na_pred <- which(is.na(pred_prob))
na_actual <- which(is.na(test_data$GS0or1_numeric))

if (length(na_pred) > 0) {
  cat("There are NA values in the predictions at indices: ", na_pred, "\n")
}
if (length(na_actual) > 0) {
  cat("There are NA values in the actual values at indices: ", na_actual, "\n")
}

# Calculate RMSE if there are no NA values
if (length(na_pred) == 0 && length(na_actual) == 0) {
  rmse <- sqrt(mean((pred_prob - test_data$GS0or1_numeric)^2))
  cat("RMSE for the neural network: ", rmse, "\n")
} else {
  cat("Cannot calculate RMSE due to NA values.\n")
}

# Confusion matrix to evaluate the classification performance
conf_matrix <- confusionMatrix(pred_class, test_data$GS0or1)
print(conf_matrix)

# Evaluate accuracy
accuracy <- sum(pred_class == test_data$GS0or1) / nrow(test_data)
cat("Accuracy for the neural network: ", accuracy, "\n")

# Plot the neural network
plotnet(nn, alpha = 0.6, circle_col = "lightblue", bord_col = "black")

